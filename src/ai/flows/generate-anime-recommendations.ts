// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview This file defines a Genkit flow for generating anime recommendations based on user preferences.
 *
 * The flow takes user preferences as input and returns a list of anime recommendations with details.
 *
 * @exports generateAnimeRecommendations - The main function to trigger the anime recommendation flow.
 * @exports GenerateAnimeRecommendationsInput - The input type for the generateAnimeRecommendations function.
 * @exports GenerateAnimeRecommendationsOutput - The output type for the generateAnimeRecommendations function.
 */

import { ai } from '@/ai/ai-instance';
import { z } from 'genkit';
import { getAnimeDetails, Anime } from '@/services/myanimelist';

const GenerateAnimeRecommendationsInputSchema = z.object({
  preferences: z.string().describe('User preferences for anime recommendations, such as favorite genres, anime, or a description of desired anime.'),
});
export type GenerateAnimeRecommendationsInput = z.infer<typeof GenerateAnimeRecommendationsInputSchema>;

const GenerateAnimeRecommendationsOutputSchema = z.array(z.object({
  title: z.string().describe('The title of the recommended anime.'),
  rating: z.number().describe('The rating of the recommended anime.'),
  summary: z.string().describe('A brief summary of the anime.'),
  watchUrl: z.string().describe('URL of where to legally stream or watch the anime.'),
}));
export type GenerateAnimeRecommendationsOutput = z.infer<typeof GenerateAnimeRecommendationsOutputSchema>;

export async function generateAnimeRecommendations(input: GenerateAnimeRecommendationsInput): Promise<GenerateAnimeRecommendationsOutput> {
  return generateAnimeRecommendationsFlow(input);
}

const getAnimeRecommendation = ai.defineTool({
  name: 'getAnimeRecommendation',
  description: 'Suggests an anime to the user, according to their preferences.',
  inputSchema: z.object({
    title: z.string().describe('The title of the anime to search for.'),
  }),
  outputSchema: z.object({
    title: z.string().describe('The title of the recommended anime.'),
    rating: z.number().describe('The rating of the recommended anime.'),
    summary: z.string().describe('A brief summary of the anime.'),
    watchUrl: z.string().describe('URL of where to legally stream or watch the anime.'),
  }),
}, async input => {
  return await getAnimeDetails(input.title);
});

const prompt = ai.definePrompt({
  name: 'generateAnimeRecommendationsPrompt',
  tools: [getAnimeRecommendation],
  input: {
    schema: z.object({
      preferences: z.string().describe('User preferences for anime recommendations.'),
    }),
  },
  output: {
    schema: z.array(z.object({
      title: z.string().describe('The title of the recommended anime.'),
      rating: z.number().describe('The rating of the recommended anime.'),
      summary: z.string().describe('A brief summary of the anime.'),
      watchUrl: z.string().describe('URL of where to legally stream or watch the anime.'),
    })),
  },
  prompt: `Based on the user preferences: {{{preferences}}}, suggest some anime. Use the getAnimeRecommendation tool to find details such as rating, summary, and watch URL.  Return an array of anime recommendations.  For each, please respond with the title, rating, summary, and watchUrl.`
});

const generateAnimeRecommendationsFlow = ai.defineFlow<
  typeof GenerateAnimeRecommendationsInputSchema,
  typeof GenerateAnimeRecommendationsOutputSchema
>({
  name: 'generateAnimeRecommendationsFlow',
  inputSchema: GenerateAnimeRecommendationsInputSchema,
  outputSchema: GenerateAnimeRecommendationsOutputSchema,
}, async input => {
  const { output } = await prompt(input);
  return output!;
});
